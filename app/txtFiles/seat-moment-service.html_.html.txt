
ReductStore - Database of Databases
Database of Databases
Browse
Leaderboards
Recent
Revision List
Accounts
Login
ReductStore
Time-Series
ReductStore is a time-series database designed specifically for blob data, written in C++ and Rust.
https://www.reduct.store/
History
ReductStore is a personal project started by Alexey Timin in 2021 with no publicly stated derivations or inspirations from other existing database systems. It has since received monthly releases and bug fixes. Alexey Timin remains the sole major contributor to this project. The project is currently undergoing a major rewrite with Rust and is actively seeking new collaborators to join.
https://github.com/reductstore/reductstore/commits/main
https://github.com/atimin
https://www.reduct.store/news/we-move-to-rust/
Checkpoints
Not Supported
ReductStore currently does not support checkpoints.
Compression
Na√Øve (Record-Level)
ReductStore directly writes blobs to disk using MessageLite::SerializeToOstream(std::ostream * output) function from Protocol Buffers (Google), which by default does not do any compression.
https://github.com/protocolbuffers/protobuf/blob/859410bccc59aeeef1c48e34960fe93827767bac/src/google/protobuf/message_lite.cc#L470
https://github.com/reductstore/reductstore/blob/45af009c099b51650b317046d35772d7dcbc6c6b/src/reduct/storage/entry.cc#LL277C1-L277C1
https://github.com/reductstore/reductstore/blob/45af009c099b51650b317046d35772d7dcbc6c6b/src/reduct/storage/block_manager.cc#LL77C1-L77C65
Concurrency Control
Not Supported
Queries can either be submitted from ReductStore's C++/Python/JavaScript client SDK, or an HTTP API. Query strings are parsed and passed in as protobuf messages. Executor tasks are created from query strings strictly in FIFO order of their arrival time. There is no guarantee that tasks will run in the same order as they arrive.
https://github.com/reductstore/reductstore/blob/45af009c099b51650b317046d35772d7dcbc6c6b/src/reduct/api/http_server.cc#LL1C1-L1C1
Data Model
Key/Value
ReductStore maintains three data abstractions: Entry (logical), Block (logical, physical), and Bucket (logical). Each Entry is a blob associated with a key and a timestamp. Each logical Block contains one or multiple Entries of the same timestamp. Logical Blocks with the same microsecond level begin time are grouped and stored as a single physical Block backed by a single file on disk. Entries that are within the same bucket and smaller than the file system's minimum file size are grouped and stored together into a single Block (backed by one file) to reduce the storage overhead of small files. A Bucket logically contains one or multiple physical blocks and is typically used to separate time series data by topic or user.
Buckets enforce storage limits (the total blob size and the total number of entries within the Bucket) and write behavior (reject write or delete earliest) when the storage limit is reached.
Deleting a single Entry or a Block is not supported. The minimum deletion level is a Bucket.
https://docs.reduct.store/how-does-it-work#internal-structure
https://docs.reduct.store/http-api/bucket-api
Foreign Keys
Not Supported
ReductStore does not support foreign keys.
Indexes
Not Supported
Block Range Index (BRIN)
Index is not supported. A BRIN-like storage hack is implemented.
Multiple logical blocks with the same microsecond-level start timestamp (earliest timestamp of all its Entries) are grouped and stored as a single file on disk. Block start timestamp is embedded in the filename for range queries to perform binary search to locate the first relevant block.
https://github.com/reductstore/reductstore/blob/45af009c099b51650b317046d35772d7dcbc6c6b/src/reduct/storage/block_manager.cc#LL1C1-L1C1
Isolation Levels
Not Supported
ReductStore is not a transactional database. No isolation control mechanism is implemented.
Joins
Not Supported
Only range queries and continuous queries are supported.
https://docs.reduct.store/http-api/entry-api
Logging
Not Supported
ReductStore does not support logging currently.
Query Compilation
Not Supported
ReductStore does not support and does not benefit from query compilation currently. Only range queries and continuous queries are supported, which always performs binary search and/or linear search to locate the starting/ending files for read/write.
Query Execution
Tuple-at-a-Time Model
ReductStore adopts Entry-at-a-Time model.
https://github.com/reductstore/reductstore/blob/45af009c099b51650b317046d35772d7dcbc6c6b/src/reduct/storage/entry.cc#LL277C1-L277C1
Query Interface
Custom API
HTTP / REST
Provides HTTP methods for Entry level read, write, and range query.
Provides HTTP methods for Bucket level metadata read, metadata update, create, and remove.
Provides HTTP methods for Server level statistics read, bucket statistics read, and engine health check.
Provides HTTP methods for token-based access control.
https://docs.reduct.store/http-api
Storage Architecture
Disk-oriented
ReductStore is a shared-nothing disk-oriented time-series database that directly persists/retrieves Entries to/from disk and does not cache any intermediate results in memory during query execution.
https://github.com/reductstore/reductstore/blob/45af009c099b51650b317046d35772d7dcbc6c6b/src/reduct/storage/block_manager.cc#LL1C1-L1C1
Storage Model
Hybrid
ReductStore adopts a hybrid storage model. Within a single physical Block, all metadata fields (timestamps, user-defined labels, file offsets) of all Entries are stored together in a row-oriented fashion as the file header, while blobs of all Entries are stored consecutively in the remaining part of the file.
https://github.com/reductstore/reductstore/blob/45af009c099b51650b317046d35772d7dcbc6c6b/src/reduct/proto/storage/entry.proto#LL1C1-L1C1
Storage Organization
Sorted Files
Entries within each logical Block are sorted by timestamp. Logical Blocks are sorted by earliest entry timestamp, grouped by microsecond-level granularity into a single physical Block, and stored as a single file on disk.
https://github.com/reductstore/reductstore/blob/45af009c099b51650b317046d35772d7dcbc6c6b/src/reduct/storage/entry.cc#LL1C1-L1C1
Stored Procedures
Not Supported
System Architecture
Shared-Everything
ReductStore is intended for single-node deployment.
https://docs.reduct.store/
Views
Not Supported
Revision #12
&nbsp;|&nbsp;
Updated 05/07/2023 2:03 a.m.
People Also Viewed
 JunoDB
Website
https://www.reduct.store/
Source Code
https://github.com/reductstore/reductstore
Tech Docs
https://docs.reduct.store/
Twitter
   @ReductStore
Developer
Alexey Timin
Country of Origin
DE
Start Year
2021
https://github.com/reductstore/reductstore/commit/336c40b3129b2002b766865b06160bd4c2332894
Project Type
Commercial, Open Source
Written in
C++, Rust
Supported languages
C++, JavaScript, Python
Operating Systems
Linux, OS X, Windows
Licenses
Mozilla Public License
Revision #12
&nbsp;|&nbsp;
Updated 05/07/2023 2:03 a.m.
People Also Viewed
 JunoDB
Copyright &copy; 2023
&bullet;
Carnegie Mellon Database Group
 Contact
 Github
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-4067813-21');
    function convertToSlug(text) {
        return text
            .toLowerCase()
            .normalize("NFD").replace(/[\u0300-\u036f]/g, "")
            .replace(/[^\w -]+/g,'')
            .replace(/ +/g,'-');
    }
    // Top Search Box
    $("#topsearch").find('input[name="q"]').autoComplete({
        minChars: 3,
        source: function(term, response) {
            $.getJSON('/search/autocomplete/', { q: term }, function(data) { response(data); });
        },
        onSelect: function(e, term, item) { window.location.href = "/db/" + convertToSlug(term); }
    });
