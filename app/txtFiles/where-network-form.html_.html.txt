
Yellowbrick - Database of Databases
Database of Databases
Browse
Leaderboards
Recent
Revision List
Accounts
Login
Yellowbrick
OLAP
Yellowbrick is a relational data warehouse that is optimized for flash-based storage.
https://www.eweek.com/storage/yellowbrick-data-enters-cloud-data-warehouse-wars
https://www.yellowbrick.com/products/data-warehouse/
https://yellowbrick.com/resources/whitepapers/inside-the-yellowbrick-data-warehouse/
Concurrency Control
Multi-version Concurrency Control (MVCC)
Yellowbrick uses append-only MVCC with vacuum garbage collection.
https://yellowbrick.com/resources/whitepapers/inside-the-yellowbrick-data-warehouse/
Data Model
Relational
Yellowbrick supports the boolean, integer, decimal, floating point, string, date/time, and UUID types available in PostgreSQL, as well as new data types for IP and MAC addresses.
https://yellowbrick.com/resources/whitepapers/inside-the-yellowbrick-data-warehouse/
Foreign Keys
Supported
https://docs.yellowbrick.com/6.1/ybd_sqlref/create_table_examples.html
Hardware Acceleration
FPGA
RDMA
Yellowbrick’s on-premise servers utilize a dual-core FPGA to accelerate table scans by performing file parsing, decompression, predicate evaluation, and Bloom filtering. The FPGA accelerator is also used for shuffling data between nodes, which happens via RDMA.
https://yellowbrick.com/resources/whitepapers/inside-the-yellowbrick-data-warehouse/
https://yellowbrick.com/resources/whitepapers/andromeda-optimized-instances/
Indexes
Not Supported
Yellowbrick does not support indexes.
https://yellowbrick.com/resources/whitepapers/inside-the-yellowbrick-data-warehouse/
Isolation Levels
Read Committed
Yellowbrick universally uses the READ COMMITTED isolation level.
https://yellowbrick.com/resources/whitepapers/inside-the-yellowbrick-data-warehouse/
Joins
Nested Loop Join
Hash Join
Sort-Merge Join
Yellowbrick supports hash, sort-merge, and nested loop joins.
https://www.youtube.com/watch?v=uHMcVDNkHi4
Parallel Execution
Intra-Operator (Horizontal)
Yellowbrick uses intra-operator parallelism, where each thread operates on a different chunk of data, and threads are synchronized to each execute the same operators simultaneously. Yellowbrick schedules execution operators that process a given packet of data to be as close to each other as possible to minimize data movement.
https://yellowbrick.com/resources/whitepapers/inside-the-yellowbrick-data-warehouse/
https://www.youtube.com/watch?v=uHMcVDNkHi4
Query Compilation
Code Generation
Yellowbrick partitions query plans into segments and converts them into C++ code. Segments are then compiled into machine code in parallel using a modified version of LLVM which is memory-resident with its ASTs pre-loaded. Compiled object files are cached and reused.
Yellowbrick also has a specialized pattern compiler for LIKE, SIMILAR TO, regular expressions, and date/time parsing. Yellowbrick generates finite state machines for these patterns and compiles them to machine code using LLVM.
https://yellowbrick.com/resources/whitepapers/inside-the-yellowbrick-data-warehouse/
Query Execution
Vectorized Model
Unlike systems which constrain their query plans to be trees, Yellowbrick uses graph query plans, which allow for execution nodes to have more than one consumer. The execution engine operates on a push-based model, passing cache-resident buffers between operators. Yellowbrick uses AVX SIMD instructions to evaluate expressions and predicate filters.
https://yellowbrick.com/resources/whitepapers/inside-the-yellowbrick-data-warehouse/
Query Interface
SQL
Yellowbrick is compatible with the PostgreSQL dialect and wire protocol, and it uses the PostgreSQL JDBC, ODBC, and ADO.NET drivers.
https://yellowbrick.com/resources/whitepapers/inside-the-yellowbrick-data-warehouse/
https://docs.yellowbrick.com/6.1/connectivity/downloading_drivers.html
Storage Architecture
Hybrid
Yellowbrick’s on-premise servers persist data in NVMe SSDs using a custom file system called BBFS (Big Block File System). BBFS is fully asynchronous and stores file system metadata in in-memory indexes. On top of BBFS sits ParityFS, a cluster-level file system which implements n+2 erasure encoding at the file level, allowing it to tolerate up to two concurrent failures. If a node fails, its files are virtually reassigned to the remaining nodes, which lazily reconstruct the files when they are read.
In the cloud version of Yellowbrick, data is persisted to an object store such as Amazon S3. Worker nodes use custom object store connectors built on a custom HTTP stack that runs asynchronously in userspace. Local SSDs operate as write-around caches: when a node writes to a shard, it writes directly to the object store, notifying other workers. Caches use a modified LRU eviction policy with scan resistance, and shards are assigned to workers using rendezvous hashing.
https://yellowbrick.com/resources/whitepapers/inside-the-yellowbrick-data-warehouse/
https://docs.yellowbrick.com/6.1/administration/managing_row_store.html
Storage Format
Apache Parquet
Yellowbrick natively supports reading from Apache Parquet and CSV files.
https://docs.yellowbrick.com/6.1/getting_started/create_external_format.html
Storage Model
Hybrid
Yellowbrick uses a column store as the main storage format, with tables horizontally partitioned into 200MB shards.
Yellowbrick also has a log-structured row store for streaming ingestion and small inserts which is periodically flushed to the column store. High-throughput streams, bulk loads, and INSERT INTO ... SELECT operations are committed directly to the column store.
https://yellowbrick.com/resources/whitepapers/inside-the-yellowbrick-data-warehouse/
Stored Procedures
Supported
Yellowbrick supports PL/pgSQL stored procedures (CREATE PROCEDURE) but not user-defined functions (CREATE FUNCTION). Unlike in PostgreSQL, stored procedures in Yellowbrick can return values and be called from SELECT statements, but only when there is no table-referencing FROM clause.
Triggers are not supported.
https://docs.yellowbrick.com/6.1/ybd_sqlref/create_procedure.html
System Architecture
Shared-Nothing
Yellowbrick employs a shared-nothing microservice architecture managed by Kubernetes. Each Yellowbrick cluster is comprised of elastically scaling worker, compiler, and bulk load pods, which are supported by pods for management, logging, and the user interface.
https://www.youtube.com/watch?v=uHMcVDNkHi4
Views
Virtual Views
Yellowbrick supports virtual views only.
https://docs.yellowbrick.com/6.1/ybd_sqlref/create_view.html
Revision #29
&nbsp;|&nbsp;
Updated 04/02/2023 1:09 a.m.
People Also Viewed
Website
https://yellowbrick.com
Tech Docs
https://yellowbrick.com/docs/
Twitter
   @YellowbrickData
Developer
Yellowbrick Data
Country of Origin
US
Start Year
2014
https://www.crunchbase.com/organization/yellowbrick-data
Project Type
Commercial
Written in
C, C++, Go, Java, Python
Derived From
PostgreSQL
Compatible With
PostgreSQL
Operating Systems
Hosted, Linux
Licenses
Proprietary
Wikipedia
https://en.wikipedia.org/wiki/Yellowbrick_Data
Revision #29
&nbsp;|&nbsp;
Updated 04/02/2023 1:09 a.m.
People Also Viewed
Copyright &copy; 2023
&bullet;
Carnegie Mellon Database Group
 Contact
 Github
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-4067813-21');
    function convertToSlug(text) {
        return text
            .toLowerCase()
            .normalize("NFD").replace(/[\u0300-\u036f]/g, "")
            .replace(/[^\w -]+/g,'')
            .replace(/ +/g,'-');
    }
    // Top Search Box
    $("#topsearch").find('input[name="q"]').autoComplete({
        minChars: 3,
        source: function(term, response) {
            $.getJSON('/search/autocomplete/', { q: term }, function(data) { response(data); });
        },
        onSelect: function(e, term, item) { window.location.href = "/db/" + convertToSlug(term); }
    });
